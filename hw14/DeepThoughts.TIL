//Zoom Zoom Zucchini - Kevin Lin, Victor Lin, Kayli Matsuyoshi
//APCS2 -- Pd1
//HW14 -- 
//2018-03-06t

/*======================================
  class KnightTour
  Animates a Knight's Tour of a square chess board.

  Mean execution times for boards of size n*n:
  n=5   0.145s    over 5 executions
  n=6   0.1778s    over 5 executions
  n=7   0.4044s    over 5 executions
  n=8   0.4042s    over 5 executions
  ======================================*/

SECTION UNO

Q1: From any starting position, can an open tour always be found? Explain.
No, because after testing the algo on the board, multiple different spots did not yield open tours. 
Not every spot will have an open tour, upon testing random spots using the Knight's Tour algorithm, some did not yield a solved board.
Q2: Same, but for closed tour.
Also no, because if this does not apply to open tours, a closed tour, with more restrictions, should not yeild solutions. 
f you can't guarantee a solution for any spot on the board, you definitely can't guarantee a closed solution.
Q3: How do you explain the increase in execution time as n increases?
Since there is more space on the board, there are more possible moves, thus more runtime. 
A larger board means more possible moves for the computer to test, so it'll take longer to execute completely.
Q4: Thoughts on optimization?
Removing the printing methods, and eliminating moves where the next moves are invalid may optimize the method. 

SECTION DOS

MAZE ALGORITHM
1. Start at starting point. ($)
2. Make 2 arrays of ints, one for possible x coordinates and one for possible y coordinates to make possible paths.
	A coordinate is a possiblility if it does not equal "$" or "#".
3. Proceed onto path with corresponding coordinates from both arrays. 
4. If path leads to a dead end, "#", backtrack to step 3 and try the next pair of coordinates. 
5. Continue until the end point, "@" is reached. Then print the solution.
